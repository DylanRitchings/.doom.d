* Default

#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "Dylan Ritchings"
      user-mail-address "DylanRitchings1998@gmail.com")

(setq doom-theme 'doom-badger)

(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

(setq doom-font (font-spec :family "Source Code Pro" :size 15))


#+END_SRC

* QUICK FIX
#+BEGIN_SRC emacs-lisp
(add-hook! 'emacs-startup-hook 'global-visual-line-mode t)

(add-hook! 'prog-mode-hook 'popwin-mode)

(setq! compilation-window-height 15)


;; start-server
(add-hook! 'after-init-hook 'server-mode)


(map! :leader
      (:prefix ("w")
      :desc "Horizontal window"
      "h" #'split-window-below)
      )

(map! :after evil
      :n "(" #'backward-sexp
      :n ")" #'forward-sexp)

;;CSV mode

(add-hook! 'csv-mode-hook
           'csv-align-mode
           'csv-header-line)

(setq! whitespace-style '(trailing tabs newline tab-mark newline-mark))

(setq! lsp-dired-mode 't)

;; (setq! format-on-save-enabled-modes ((not emacs-lisp-mode sql-mode tex-mode latex-mode org-msg-edit-mode c-mode)))
#+END_SRC
** Straight package manager
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

* Basic and Navigation Bindings

** Movement
#+BEGIN_SRC emacs-lisp

(remove-hook 'doom-first-input-hook #'evil-snipe-mode)

(setq ostype
  (substring
    (shell-command-to-string "echo $OSTYPE")
   0 -1))

#+END_SRC
*** Scroll up/down
#+begin_src emacs-lisp

;; (defun center-cursor ()
;;   "Center the cursor on the middle line of the current window."
;;   (interactive)
;;   (let* (
;;         (line-at-window-start (line-number-at-pos (window-start)))
;;         (line-at-window-end (line-number-at-pos (window-end)))
;;         (lines-in-window (- line-at-window-end line-at-window-start))
;;         (middle-line (+ line-at-window-start (/ lines-in-window 2))))
;;         (message "line-at-window-start: %s" line-at-window-start)
;;         (message "line-at-window-end: %s" line-at-window-end)
;;         (message "lines-in-window: %s" lines-in-window)
;;         (message "middle-line: %s" middle-line)
;;     (goto-line middle-line)))

;; (defun center-scroll-down (&optional count)
;;   ;; (evil-scroll-down)
;;     (evil-scroll-up)
;;     (recenter))

;; (defun center-scroll-up ()
;;   (interactive)
;;   (evil-scroll-up)
;;   (recenter)
;; )

;; (after! evil
;;   (map!
;;    :n "C-d" 'center-scroll-down
;;    :n "C-u" 'center-scroll-up)
;;                 )
(defun my-evil-scroll-advice (&rest _)
  "Advice function to run recenter after evil-scroll."
  (recenter))

(advice-add 'evil-scroll-up :after #'my-evil-scroll-advice)

(advice-add 'evil-scroll-down :after #'my-evil-scroll-advice)

  #+end_src
*** Window movement
#+BEGIN_SRC emacs-lisp
;; (map! :leader
;;     ;; Navigation
;;     "<left>"     #'evil-window-left
;;     "<down>"     #'evil-window-down
;;     "<up>"       #'evil-window-up
;;     "<right>"    #'evil-window-right
;;     ;; Swapping windows
;;     "C-<left>"       #'+evil/window-move-left
;;     "C-<down>"       #'+evil/window-move-down
;;     "C-<up>"         #'+evil/window-move-up
;;     "C-<right>"      #'+evil/window-move-right
;;     "M-<right>" #'evil-window-vsplit
;;     "M-<down>" #'evil-window-split)
#+END_SRC
** Copy Paste
#+BEGIN_SRC emacs-lisp
;; (map!
;;       :niv "s-c" #'evil-yank
;;       :niv "s-v" #'evil-paste-after)

;; (map! :after evil
;;       :niv "C-c" #'evil-yank
;;       :niv "C-v" #'evil-paste-after)

(global-set-key (kbd "<XF86Paste>") 'evil-paste-after)
(global-set-key (kbd "<XF86Copy>") 'evil-yank)

(setq evil-kill-on-visual-paste nil)
#+END_SRC
** Shell Window
#+BEGIN_SRC emacs-lisp
(defun shell-vert ()
  (interactive)
  (split-window-right)
  (other-window 1)
  (vterm "/usr/bin/zsh")
  )

(defun shell-this-window ()
  (interactive)
  (vterm "/usr/bin/zsh")
  )

(defun shell-hori ()
  (interactive)
  (split-window-below 55)
  (other-window 1)
  (vterm "/usr/bin/zsh")
  )

(map! :leader
      (:prefix ("z" . "Shell")
      :desc "Shell this window"
      "t" #'shell-this-window
      :desc "Verticle shell"
      "v" #'shell-vert
      :desc "Horizontal shell"
      "h" #'shell-hori
      :desc "Close shell"
      "d" #'kill-buffer-and-window)
      )
#+END_SRC


** Backward kill word
#+BEGIN_SRC emacs-lisp
(defun aborn/backward-kill-word ()
  "Customize/Smart backward-kill-word."
  (interactive)
  (let* ((cp (point))
         (backword)
         (end)
         (space-pos)
         (backword-char (if (bobp)
                            ""           ;; cursor in begin of buffer
                          (buffer-substring cp (- cp 1)))))
    (if (equal (length backword-char) (string-width backword-char))
        (progn
          (save-excursion
            (setq backword (buffer-substring (point) (progn (forward-word -1) (point)))))
          (setq ab/debug backword)
          (save-excursion
            (when (and backword          ;; when backword contains space
                       (s-contains? " " backword))
              (setq space-pos (ignore-errors (search-backward " ")))))
          (save-excursion
            (let* ((pos (ignore-errors (search-backward-regexp "\n")))
                   (substr (when pos (buffer-substring pos cp))))
              (when (or (and substr (s-blank? (s-trim substr)))
                        (s-contains? "\n" backword))
                (setq end pos))))
          (if end
              (kill-region cp end)
            (if space-pos
                (kill-region cp space-pos)
              (backward-kill-word 1))))
      (kill-region cp (- cp 1)))         ;; word is non-english word
    ))

(global-set-key  [C-backspace]
            'aborn/backward-kill-word)
#+END_SRC

** Alt kill to end of line
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-<backspace>") (lambda ()
				       (interactive)
				       (kill-line 0)))
(global-set-key (kbd "M-DEL") 'kill-line)
#+END_SRC

** XREF back
#+begin_SRC emacs-lisp
(map! :leader
      (:prefix ("c")
      :mode lsp-ui-mode-map
      :desc "xref back"
      "b" #'xref-go-back
))
#+end_SRC

* Programming commands
** Comment line
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-;") 'comment-line)
#+END_SRC
** Fix line endings on save

#+BEGIN_SRC emacs-lisp
(after! save-buffer
  (set-buffer-file-coding-system unix))
#+END_SRC
** marker
#+begin_src emacs-lisp
;;(map! :nv "s-d" #'evil-multiedit-match-all)

(map! :nv "m" #'evil-set-marker)
#+end_src
** git
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("g")
        :desc "next conflict"
        "n" #'smerge-vc-next-conflict
            ))
#+end_src

* Ease Of Use

** Project replace
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("c")
       :desc "replace project wide")
      "r" #'projectile-replace)
#+end_src
** Small IDE changes
#+BEGIN_SRC emacs-lisp
(setq! confirm-kill-emacs nil)

(setq! doom-modeline-vcs-max-length 50)
#+END_SRC
** Whichkey
#+BEGIN_SRC emacs-lisp
(require 'which-key)
(setq! which-key-idle-delay 0.1)
(which-key-mode)
#+END_SRC
** Open in iterm

#+BEGIN_SRC emacs-lisp
(setq! shell-file-name "zsh")
(setq! shell-command-switch "-c")

(defun open-iterm ()
    (interactive)
    (shell-command "open -a iterm.app ."))

(defun open-winterm ()
    (interactive)
    (shell-command "wt.exe -w 1 -d ."))

(defun open-explorer ()
    (interactive)
    (shell-command "explorer ."))


(if (eq system-type 'darwin)
    (progn

    (map! :leader
        (:prefix ("o")
        :desc "Open . in iterm"
        "t" #'open-iterm
        ))
    (setq shell-file-name "zsh")

    ;;VTERM
    ))

(if (eq system-type 'windows-nt)
    (progn

    (map! :leader
        (:prefix ("o")
        :desc "Open . in winterm"
        "t" #'open-winterm
        ))

    (map! :leader
        (:prefix ("o")
        :desc "Open . in explorer"
        "e" #'open-explorer
        ))

    ;; (setq dotspacemacs-persistent-server t)
    (setq shell-file-name "C:\\Users\\dylan.ritchings\\dev\\software\\Git\\usr\\bin\\zsh.exe")
    (setq explicit-shell-file-name "C:\\Users\\dylan.ritchings\\dev\\software\\Git\\usr\\bin\\zsh.exe")
    (setq shell-default-shell 'shell)
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
    ))

#+END_SRC

** git fix
#+BEGIN_SRC emacs-lisp
(defun git-add ()
  (interactive)
  (shell-command "git add $(git rev-parse --show-toplevel)"))

#+END_SRC


** Run command in iTerm 2

#+begin_SRC emacs-lisp

(defun doom/iterm2-run (command)
  "Open a new tab in the current iTerm2 window, change to the current directory, and run COMMAND asynchronously, keeping the iTerm2 window open after the command finishes."
  (interactive "sCommand to run: ")
  (let ((default-directory (file-name-directory (buffer-file-name))))
    (start-process "iTerm2" nil "osascript" "-e"
                   (concat "tell application \"iTerm2\"
                               activate
                               tell current window
                                   set newTab to (create tab with default profile)
                                   tell newTab
                                       tell current session
                                           write text \"cd " default-directory "\"
                                           write text \"" command "\"
                                       end tell
                                   end tell
                               end tell
                           end tell"))))


#+end_SRC


* Package configs
** Centaur tabs
#+BEGIN_SRC emacs-lisp :tangle no
(setq! centaur-tabs-style "bar"
      centaur-tabs-headline-match t
      centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-set-modified-marker t
      centaur-tabs-modifier-marker "~"
      centaur-tabs-gray-out-icons t)
(after! centaur-tabs
  (centaur-tabs-group-by-projectile-project))
(centaur-tabs-mode t)
#+END_SRC

** Company/corfu WIP

#+begin_src emacs-lisp

(company-quickhelp-mode 1)
(after! company-quickhelp
  (setq company-quickhelp-delay 0))

(setq company-idle-delay 0)

;; ;; Add extensions

;; ;; Use Dabbrev with Corfu!
;; (use-package! dabbrev
;;   ;; Swap M-/ and C-M-/
;;   :bind (("M-/" . dabbrev-completion)
;;          ("C-M-/" . dabbrev-expand))
;;   ;; Other useful Dabbrev configurations.
;;   :custom
;;   (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))

;; (use-package! cape
;;   :init
;;   ;; Add `completion-at-point-functions', used by `completion-at-point'.
;;   (add-to-list 'completion-at-point-functions #'cape-dabbrev)
;;   (add-to-list 'completion-at-point-functions #'cape-file)
;;   (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-yasnippet))
;;   )
;; (setq! corfu-auto t)
;; (setq! corfu-quit-no-match 'separator)
;; (setq! corfu-auto-prefix 0)
;; (setq! corfu-auto-delay 0)

;; (use-package! corfu
;;   :custom
;;   (corfu-auto t)                 ;; Enable auto completion
;;   (corfu-quit-no-match 'separator)


;;   :init
;;   (global-corfu-mode)
;;   )

;; ;; ;; (use-package! emacs
;; ;; ;;   :init
;; ;; ;;   ;; TAB cycle if there are only few candidates
;; ;; ;;   (setq completion-cycle-threshold 3))

;; ;; ;;ENTER IGNORE
;; ;; (after! company

;; ;;   ;; <return> is for windowed Emacs; RET is for terminal Emacs
;; ;;   (dolist (key '("<return>" "RET"))
;; ;;     ;; Here we are using an advanced feature of define-key that lets
;; ;;     ;; us pass an "extended menu item" instead of an interactive
;; ;;     ;; function. Doing this allows RET to regain its usual
;; ;;     ;; functionality when the user has not explicitly interacted with
;; ;;     ;; Company.
;; ;;     (define-key company-active-map (kbd key)
;; ;;       `(menu-item nil company-complete
;; ;;                   :filter ,(lambda (cmd)
;; ;;                              (when (company-explicit-action-p)
;; ;;                                cmd)))))
;; ;;   (define-key company-active-map (kbd "TAB") #'company-complete-selection)
;; ;;   (define-key company-active-map (kbd "SPC") nil)

;; ;;   ;; Company appears to override the above keymap based on company-auto-complete-chars.
;; ;;   ;; Turning it off ensures we have full control.
;; ;;   (setq company-auto-complete-chars nil)
;; ;;                 )
  #+end_src
*** Backends
#+BEGIN_SRC emacs-lisp
;; (setq! company-backends
;;     '(
;;       (company-capf :with company-yasnippet)
;;       ))

;; (add-hook! 'lsp-managed-mode-hook (lambda () (setq-local company-backends )))
;; (company-terraform-init)
;; (add-hook! 'after-init-hook 'company-flx-mode)
;; (add-hook! 'after-init-hook 'global-company-mode)
#+END_SRC
* Languages
** Python
*** flycheck
#+begin_src emacs-lisp
;; (after! flycheck
;;   (setq flycheck-python-pyright-executable "python-pyright"))

;; (flycheck)

(after! flycheck-mode
   (flycheck-add-next-checker 'lsp 'python-pyright))
#+end_src
*** run in zshell
#+begin_src emacs-lisp
(defun vterm-sbt ()
  (interactive)
  (split-window-below 55)
  (other-window 1)
  (vterm "/usr/bin/zsh" "sbt")
  )

(map! :leader
      (:prefix ("z" . "Shell")
      :desc "Run Scala"
      "s" #'vterm-sbt))
#+end_src

* Visual
** Line numbers
#+begin_src emacs-lisp

(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode +1)

#+end_src
** Bookmark
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("v" . "Bookmark")
      :mode lsp-ui-mode-map
      :desc "toggle bookmark"
      "b" #'bm-toggle
      :desc "bookmark prev"
      "k" #'bm-previous
      :desc "bookmark next"
      "l" #'bm-next
))
#+end_src

** Rainbow
#+begin_src emacs-lisp
(add-hook! 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

** Startup
#+begin_src emacs-lisp :tangle no

(defun ascii-art ()
  (let* ((banner '(
"______ _____ ____ ___ ___"
  "`  _  V  _  V  _ \\|  V  ´"
  "| | | | | | | | | |     |"
  "| | | | | | | | | | . . |"
  "| |/ / \\ \\| | |/ /\\ |V| |"
  "|   /   \\__/ \\__/  \\| | |"
  "|  /                ' | |"
  "| /     E M A C S     \\ |"
  "´´                     ``"                                                ))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(defun emacs ()
  (let* ((banner '(" E M A C S "))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq! +doom-dashboard-banner-padding '(0 . 0))

(setq +doom-dashboard-ascii-banner-fn #'ascii-art)

(if (string= ostype "linux-android")
    (setq +doom-dashboard-ascii-banner-fn #'emacs)
)

(assoc-delete-all "Open org-agenda" +doom-dashboard-menu-sections)
(assoc-delete-all "Recently opened files" +doom-dashboard-menu-sections)
(assoc-delete-all "Open project" +doom-dashboard-menu-sections)
(assoc-delete-all "Jump to bookmark" +doom-dashboard-menu-sections)
(assoc-delete-all "Open private configuration" +doom-dashboard-menu-sections)
(assoc-delete-all "Open documentation" +doom-dashboard-menu-sections)



(setq! dashboard-key "")
(if (string= ostype "linux-android")
    (setq! dashboard-key "\n")
)

(if (string= ostype "linux-android")
    (progn

    (add-to-list '+doom-dashboard-menu-sections
    '("org-agenda "
        :icon (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
        :key ""
        :when (fboundp 'org-agenda)
        :action org-agenda))

    (add-to-list '+doom-dashboard-menu-sections
    '("documentation"
        :icon (all-the-icons-octicon "book" :face 'doom-dashboard-menu-title)
        :key ""
        :action doom/help))

    (add-to-list '+doom-dashboard-menu-sections
    '("project"
        :icon (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title)
        :key ""
        :action projectile-switch-project))

    (add-to-list '+doom-dashboard-menu-sections
    '("config"
        :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
        :key ""
        :when (file-directory-p doom-user-dir)
        :action doom/open-private-config))

    (add-to-list '+doom-dashboard-menu-sections
    '("bookmark"
        :icon (all-the-icons-octicon "bookmark" :face 'doom-dashboard-menu-title)
        :key ""
        :action bookmark-jump))

    (add-to-list '+doom-dashboard-menu-sections
    '("recent files"
        :icon (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
        :key ""
        :action recentf-open-files))

    ))


(if (not (string= ostype "linux-android"))
    (progn

    (add-to-list '+doom-dashboard-menu-sections
    '("org-agenda"
        :icon (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
        :key "SPC o A"
        :when (fboundp 'org-agenda)
        :action org-agenda))

    (add-to-list '+doom-dashboard-menu-sections
    '("documentation"
        :icon (all-the-icons-octicon "book" :face 'doom-dashboard-menu-title)
        :key "SPC h d h"
        :action doom/help))

    (add-to-list '+doom-dashboard-menu-sections
    '("project"
        :icon (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title)
        :key "SPC p p"
        :action projectile-switch-project))

    (add-to-list '+doom-dashboard-menu-sections
    '("config"
        :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
        :key "SPC f P"
        :when (file-directory-p doom-user-dir)
        :action doom/open-private-config))

    (add-to-list '+doom-dashboard-menu-sections
    '("bookmark"
        :icon (all-the-icons-octicon "bookmark" :face 'doom-dashboard-menu-title)
        :key "SPC RET"
        :action bookmark-jump))

    (add-to-list '+doom-dashboard-menu-sections
    '("recent files"
        :icon (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
        :key "SPC f r"
        :action recentf-open-files))

    ))



(if (string= ostype "linux-android")
    (setq! +doom-dashboard--width 30)
)

#+end_src
